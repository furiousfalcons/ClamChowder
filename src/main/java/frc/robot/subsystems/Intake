package frc.robot.subsystems;

import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkMax;
import com.revrobotics.ColorSensorV3;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.motorcontrol.Spark;
import edu.wpi.first.wpilibj.util.Color;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

public class Intake extends SubsystemBase {
    private NetworkTable tableInOut = NetworkTableInstance.getDefault().getTable("InOut");
    private SparkMax inOutMotor; 
    private ColorSensorV3 colorSensor;
    private long time;
    private boolean isIntaking;
    private boolean isOutputing;
    private I2C.Port i2cPort;
    int proximity;

    public InOut() {
        i2cPort = I2C.Port.kOnboard;
        colorSensor = new ColorSensorV3(i2cPort);
        //work on the next line(WIP)
        inOutMotor = new SparkMax()
        time = System.currentTimeMillis();

    }

    @Override
    public void periodic() {
        proximity = colorSensor.getProximity();
    }

    public void intake() {
        isPickingUp = true;
        inOutMotor.set( Constants.intakeMotorSpeed);
        tableInOut.getEntry("InTake").setBoolean(true);
    }

 }

 public void shoot() {
    if (isIntaking){
        isOutputing = true;
        inOutMotor.set(-Constants.OutputMotorSpeed);
        tableInOut.getEntry("Output").setBoolean(true);
    }
 }

 public void stop() {
    isOutputing = false;
    isIntaking = false;
    inOutMotor.set(0.0);
    tableInOut.getEntry("Out").setBoolean(false);
    tableInOut.getEntry("Intake").setBoolean(false)
 }

 public boolean isCurrentlyInputing()
 {
    return isIntaking;
 }
 public boolean isCurrentlyOutputing()
 {
    return isOutputing;
 }
